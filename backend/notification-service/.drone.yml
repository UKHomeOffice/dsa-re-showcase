kind: pipeline
type: kubernetes
name: notification-service-build-test

platform:
  os: linux
  arch: amd64


trigger:
  event:
  - push

steps:

  - name: build-and-tag-image-notification-service
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      # wait for drone docker service (docker server running the docker daemon) to be up before running docker build
      - n=0; while [ "$n" -lt 60 ] && ! docker stats --no-stream; do n=$(( n + 1 )); sleep 1; done
      - if ! docker stats --no-stream; then echo "Docker appears not to be running"; exit 1; fi
      # build and tag the image
      - docker build --no-cache -f backend/notification-service/Dockerfile -t quay.io/ukhomeofficedigital/dsa-re-notification-service:latest .
    volumes:
      - name: dockersock
        path: /var/run

  - name: trivy-scan-image-notification-service
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    pull: always
    environment:
        IMAGE_NAME: quay.io/ukhomeofficedigital/dsa-re-notification-service:latest
        SEVERITY: CRITICAL --dependency-tree
        FAIL_ON_DETECTION: true
        IGNORE_UNFIXED: false
        ALLOW_CVE_LIST_FILE: .trivyignore.yaml

  
  
  - name: publish-image-latest-notification-service
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    environment:
      RE_ROBOT_QUAY_USER:
        from_secret: ROBOT_QUAY_USER
      RE_ROBOT_QUAY_PASS:
        from_secret: ROBOT_QUAY_PASS
    commands:
      - echo "$${ROBOT_QUAY_PASS}" | docker login -u "$${ROBOT_QUAY_USER}" --password-stdin quay.io
      - docker push quay.io/ukhomeofficedigital/dsa-re-notification-service:latest
    volumes:
      - name: dockersock
        path: /var/run


services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

volumes:
  - name: dockersock
    temp: {}
    
  # - name: debug-versions
  #   image: quay.io/ukhomeofficedigital/helm:3.15.4-build.1
  #   commands:
  #     - kubectl config set-cluster buildstep --server=$SHOWCASE_KUBE_SERVER
  #     - kubectl config set-credentials $SHOWCASE_KUBE_USER --token=$SHOWCASE_KUBE_TOKEN
  #     - kubectl config set-context buildstep --cluster=buildstep --user=$SHOWCASE_KUBE_USER --namespace=$SHOWCASE_KUBE_NAMESPACE
  #     - kubectl config use-context buildstep
  #     - helm version
  #     - kubectl --context=buildstep version
  #     - helm list --kube-context=buildstep
  #     - helm list --namespace=$SHOWCASE_KUBE_NAMESPACE --kube-apiserver=$SHOWCASE_KUBE_SERVER --kube-token=$SHOWCASE_KUBE_TOKEN
  #   environment:
  #     SHOWCASE_KUBE_USER:
  #       from_secret: KUBE_NAMESPACE_DEV
  #     SHOWCASE_KUBE_NAMESPACE:
  #       from_secret: KUBE_NAMESPACE_DEV
  #     SHOWCASE_KUBE_SERVER:
  #       from_secret: KUBE_SERVER_NOT_PROD
  #     SHOWCASE_KUBE_TOKEN:
  #       from_secret: KUBE_TOKEN_DEV

  # - name: helm-test
  #   image: quay.io/ukhomeofficedigital/helm:v3.5.4
  #   commands:
  #     - helm version
  #     - kubectl version

  # - name: helm-install
  #   image: quay.io/ukhomeofficedigital/helm:v3.5.4
  #   commands:
  #     - helm version
  #     - kubectl version

