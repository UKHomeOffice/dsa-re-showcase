apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "registration-service.fullname" . }}
  labels:
    {{- include "registration-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "registration-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "registration-service.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "registration-service.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automount }}
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
      {{- if((.Values.dynatrace).podRuntimeInjection).enabled }}
        - name: install-oneagent
          image: quay.io/ukhomeofficedigital/dsa-re-dynatrace-oneagent-pod-runtime-injection:1.0.0
          env:
            - name: DYNATRACE_API_URL
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-oneagent
                  key: api-url
            - name: DYNATRACE_PAAS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-oneagent
                  key: paas-installer-download-token
            - name: DYNATRACE_ONEAGENT_OPTIONS
              value: flavor=multidistro&include=java
            - name: DYNATRACE_INSTALL_DIR
              value: /opt/dynatrace/oneagent
          volumeMounts:
            - mountPath: /opt/dynatrace/oneagent
              name: {{ (((.Values).dynatrace).podRuntimeInjection).volumeName | default "oneagent" }}
        {{- end }}
        - name: configure-truststore
          image: "quay.io/ukhomeofficedigital/dsa-re-registration-service:{{ .Values.image.tag | default .Chart.AppVersion }}"
          env:
            - name: TRUSTSTORE_RUNTIME
              value: /certs
            - name: TRUSTSTORE_PASSWORD
              value: changeit    
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          resources:
            limits:
              cpu: 100m
              memory: 512Mi
          command: ["/bin/sh"]
          args: ["-c", "keytool -importkeystore -srckeystore $JAVA_HOME/lib/security/cacerts -destkeystore /certs/custom_truststore.jks -srcstoretype JKS -deststoretype JKS -storepass changeit -noprompt && keytool -import -alias ACPRootCA -keystore /certs/custom_truststore.jks -file /etc/ssl/certs/acp-root.crt -storepass changeit -noprompt"]
          volumeMounts:
            - name: bundle
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: certs
              mountPath: /certs
      containers:
        - name: {{ .Chart.Name }}
          image: "quay.io/ukhomeofficedigital/dsa-re-registration-service:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: RANDOM
              value: {{ randAlphaNum 5 | quote }}
            - name: SHOWCASE_SERVICES_DB_ENDPOINT
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.environment "preprod" }}
                  name: dsarepreprodshowcase-rds
                  {{- else }}
                  name: dsaredevshowcase-rds
                  {{- end }}
                  key: endpoint
            - name: SHOWCASE_SERVICES_DB_PORT
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.environment "preprod" }}
                  name: dsarepreprodshowcase-rds
                  {{- else }}
                  name: dsaredevshowcase-rds
                  {{- end }}
                  key: port
            - name: SHOWCASE_SERVICES_DB_NAME
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.environment "preprod" }}
                  name: dsarepreprodshowcase-rds
                  {{- else }}
                  name: dsaredevshowcase-rds
                  {{- end }}
                  key: default_db
            - name: SHOWCASE_SERVICES_DB_USER
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.environment "preprod" }}
                  name: dsarepreprodshowcase-rds
                  {{- else }}
                  name: dsaredevshowcase-rds
                  {{- end }}
                  key: username
            - name: SHOWCASE_SERVICES_DB_PWD
              valueFrom:
                secretKeyRef:
                  {{- if eq .Values.environment "preprod" }}
                  name: dsarepreprodshowcase-rds
                  {{- else }}
                  name: dsaredevshowcase-rds
                  {{- end }}
                  key: password
            {{- if eq .Values.environment "preprod" }}
            - name: DYNATRACE_PROD_METRICS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-prod-metrics-ingest
                  key: token
            - name: DYNATRACE_PROD_METRICS_API_URL
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-prod-metrics-ingest
                  key: api_url
            {{- else }}
            - name: DYNATRACE_METRICS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-metrics-ingest
                  key: token
            - name: DYNATRACE_METRICS_API_URL
              valueFrom:
                secretKeyRef:
                  name: registration-service-dynatrace-metrics-ingest
                  key: api_url
            {{- end }}
            - name: JAVA_OPTS
              value: >
                -Xms256m -Xmx400m
                -Dspring.profiles.active={{ .Release.Namespace }}
                -Djavax.net.ssl.trustStore=/certs/custom_truststore.jks
                -Djavax.net.ssl.trustStorePassword=changeit
            - name: KAFKA_CONFIG
              value: "/etc/kafka-tls/client.properties"
          {{- if((.Values.dynatrace).podRuntimeInjection).enabled }}
            - name: LD_PRELOAD
              value: /opt/dynatrace/oneagent/agent/lib64/liboneagentproc.so
          {{- end }}
          volumeMounts:
          {{- if((.Values.dynatrace).podRuntimeInjection).enabled }}
            - name: {{ (((.Values).dynatrace).podRuntimeInjection).volumeName | default "oneagent" }}
              mountPath: /opt/dynatrace/oneagent
          {{- end }}
            - name: kafka-tls-storage
              mountPath: /etc/kafka-tls
            - name: certs
              mountPath: /certs
              readOnly: true
      volumes:
      {{- if ((.Values.dynatrace).podRuntimeInjection).enabled }}
        - name: {{ (((.Values).dynatrace).podRuntimeInjection).volumeName | default "oneagent" }}
          emptyDir: {}
      {{- end }}
        - name: kafka-tls-storage
          persistentVolumeClaim:
            claimName: showcase-storage-pvc
        - name: certs
          emptyDir: {}
        - name: secrets
          emptyDir: {}
        - name: bundle
          configMap:
            name: bundle
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
